package tech.fastj.input.keyboard;

import tech.fastj.gameloop.event.EventObserver;
import tech.fastj.input.InputManager;
import tech.fastj.input.keyboard.events.KeyboardActionEvent;
import tech.fastj.input.keyboard.events.KeyboardStateEvent;
import tech.fastj.input.keyboard.events.KeyboardTypedEvent;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Set;

/**
 * Listens to and receives {@link KeyboardActionEvent keyboard action events}.
 * <p>
 * Useful information:
 * <ul>
 *     <li>{@link InputManager#addKeyboardActionListener(KeyboardActionListener) Adding keyboard listeners to a game}</li>
 * </ul>
 * <b>For re-implementors of the mouse events system</b>: If you are planning to implement this class into a separate usage, you may
 * consider using the {@code InputManager} class to store a list of keyboard action listeners. Then, have events from a class extending
 * {@link KeyListener AWT's KeyListener} which fires {@link KeyboardActionEvent key events} to that {@link InputManager input manager}.
 *
 * @author Andrew Dey
 * @since 1.7.0
 */
public interface KeyboardActionListener extends EventObserver<KeyboardActionEvent> {

    /**
     * Event called when a key is currently pressed, once per game update.
     *
     * @param keysDown The set of keys currently pressed down.
     */
    default void onKeyDown(Set<Keys> keysDown) {
    }

    /**
     * Event called when a key was recently pressed.
     *
     * @param keyboardStateEvent The key event generated by the recent key press.
     */
    default void onKeyRecentlyPressed(KeyboardStateEvent keyboardStateEvent) {
    }

    /**
     * Event called when a key was recently released.
     *
     * @param keyboardStateEvent The key event generated by the recent key release.
     */
    default void onKeyReleased(KeyboardStateEvent keyboardStateEvent) {
    }

    /**
     * Event called when a key was recently typed.
     *
     * @param keyboardTypedEvent The key event generated by the recent key type.
     */
    default void onKeyTyped(KeyboardTypedEvent keyboardTypedEvent) {
    }

    @Override
    default void eventReceived(KeyboardActionEvent keyboardActionEvent) {
        if (keyboardActionEvent.isConsumed()) {
            return;
        }

        switch (keyboardActionEvent.getRawEvent().getID()) {
            case KeyEvent.KEY_PRESSED -> onKeyRecentlyPressed((KeyboardStateEvent) keyboardActionEvent);
            case KeyEvent.KEY_RELEASED -> onKeyReleased((KeyboardStateEvent) keyboardActionEvent);
            case KeyEvent.KEY_TYPED -> onKeyTyped((KeyboardTypedEvent) keyboardActionEvent);
        }
    }
}
